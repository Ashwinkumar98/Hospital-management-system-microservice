package io.microservice.constultation.client;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachePut;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;

import io.microservice.constultation.model.Diagnosis;

@Service
public class DiagnosisServiceClient {
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private CacheManager cacheManager;

	@HystrixCommand(fallbackMethod = "getFallbackDiagnosis",commandProperties = {
			@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "2000"),
			@HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "5"),
			@HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "50"),
			@HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "5000")
	})
	@CachePut(value = "diagnosisCache",key = "#id")
	public Diagnosis getDiagnosisDetails(int id) {
		return restTemplate.getForObject("http://DIAGNOSIS-SERVICE/diagnosis/"+id,Diagnosis.class);
	}
	

	public Diagnosis getFallbackDiagnosis(int id) {
		Diagnosis data = cacheManager.getCache("diagnosisCache").get(id, Diagnosis.class);
		if(data!=null)
			return data;
		return null;
	}
}
